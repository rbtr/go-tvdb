// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchSeriesParams creates a new GetSearchSeriesParams object
// with the default values initialized.
func NewGetSearchSeriesParams() *GetSearchSeriesParams {
	var ()
	return &GetSearchSeriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchSeriesParamsWithTimeout creates a new GetSearchSeriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSearchSeriesParamsWithTimeout(timeout time.Duration) *GetSearchSeriesParams {
	var ()
	return &GetSearchSeriesParams{

		timeout: timeout,
	}
}

// NewGetSearchSeriesParamsWithContext creates a new GetSearchSeriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSearchSeriesParamsWithContext(ctx context.Context) *GetSearchSeriesParams {
	var ()
	return &GetSearchSeriesParams{

		Context: ctx,
	}
}

// NewGetSearchSeriesParamsWithHTTPClient creates a new GetSearchSeriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSearchSeriesParamsWithHTTPClient(client *http.Client) *GetSearchSeriesParams {
	var ()
	return &GetSearchSeriesParams{
		HTTPClient: client,
	}
}

/*GetSearchSeriesParams contains all the parameters to send to the API endpoint
for the get search series operation typically these are written to a http.Request
*/
type GetSearchSeriesParams struct {

	/*AcceptLanguage
	  Records are returned with the some fields in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.

	*/
	AcceptLanguage *string
	/*ImdbID
	  IMDB id of the series

	*/
	ImdbID *string
	/*Name
	  Name of the series to search for.

	*/
	Name *string
	/*Slug
	  Slug from site URL of series (https://www.thetvdb.com/series/$SLUG)

	*/
	Slug *string
	/*Zap2itID
	  Zap2it ID of the series to search for.

	*/
	Zap2itID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get search series params
func (o *GetSearchSeriesParams) WithTimeout(timeout time.Duration) *GetSearchSeriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search series params
func (o *GetSearchSeriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search series params
func (o *GetSearchSeriesParams) WithContext(ctx context.Context) *GetSearchSeriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search series params
func (o *GetSearchSeriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search series params
func (o *GetSearchSeriesParams) WithHTTPClient(client *http.Client) *GetSearchSeriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search series params
func (o *GetSearchSeriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get search series params
func (o *GetSearchSeriesParams) WithAcceptLanguage(acceptLanguage *string) *GetSearchSeriesParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get search series params
func (o *GetSearchSeriesParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithImdbID adds the imdbID to the get search series params
func (o *GetSearchSeriesParams) WithImdbID(imdbID *string) *GetSearchSeriesParams {
	o.SetImdbID(imdbID)
	return o
}

// SetImdbID adds the imdbId to the get search series params
func (o *GetSearchSeriesParams) SetImdbID(imdbID *string) {
	o.ImdbID = imdbID
}

// WithName adds the name to the get search series params
func (o *GetSearchSeriesParams) WithName(name *string) *GetSearchSeriesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get search series params
func (o *GetSearchSeriesParams) SetName(name *string) {
	o.Name = name
}

// WithSlug adds the slug to the get search series params
func (o *GetSearchSeriesParams) WithSlug(slug *string) *GetSearchSeriesParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the get search series params
func (o *GetSearchSeriesParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithZap2itID adds the zap2itID to the get search series params
func (o *GetSearchSeriesParams) WithZap2itID(zap2itID *string) *GetSearchSeriesParams {
	o.SetZap2itID(zap2itID)
	return o
}

// SetZap2itID adds the zap2itId to the get search series params
func (o *GetSearchSeriesParams) SetZap2itID(zap2itID *string) {
	o.Zap2itID = zap2itID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchSeriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	if o.ImdbID != nil {

		// query param imdbId
		var qrImdbID string
		if o.ImdbID != nil {
			qrImdbID = *o.ImdbID
		}
		qImdbID := qrImdbID
		if qImdbID != "" {
			if err := r.SetQueryParam("imdbId", qImdbID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if o.Zap2itID != nil {

		// query param zap2itId
		var qrZap2itID string
		if o.Zap2itID != nil {
			qrZap2itID = *o.Zap2itID
		}
		qZap2itID := qrZap2itID
		if qZap2itID != "" {
			if err := r.SetQueryParam("zap2itId", qZap2itID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
