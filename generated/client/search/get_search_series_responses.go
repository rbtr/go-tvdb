// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/rbtr/go-tvdb/generated/models"
)

// GetSearchSeriesReader is a Reader for the GetSearchSeries structure.
type GetSearchSeriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchSeriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchSeriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSearchSeriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSearchSeriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchSeriesOK creates a GetSearchSeriesOK with default headers values
func NewGetSearchSeriesOK() *GetSearchSeriesOK {
	return &GetSearchSeriesOK{}
}

/*GetSearchSeriesOK handles this case with default header values.

An array of results that match the provided query.
*/
type GetSearchSeriesOK struct {
	Payload *models.SeriesSearchResults
}

func (o *GetSearchSeriesOK) Error() string {
	return fmt.Sprintf("[GET /search/series][%d] getSearchSeriesOK  %+v", 200, o.Payload)
}

func (o *GetSearchSeriesOK) GetPayload() *models.SeriesSearchResults {
	return o.Payload
}

func (o *GetSearchSeriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SeriesSearchResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchSeriesUnauthorized creates a GetSearchSeriesUnauthorized with default headers values
func NewGetSearchSeriesUnauthorized() *GetSearchSeriesUnauthorized {
	return &GetSearchSeriesUnauthorized{}
}

/*GetSearchSeriesUnauthorized handles this case with default header values.

Returned if your JWT token is missing or expired
*/
type GetSearchSeriesUnauthorized struct {
	Payload *models.NotAuthorized
}

func (o *GetSearchSeriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /search/series][%d] getSearchSeriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSearchSeriesUnauthorized) GetPayload() *models.NotAuthorized {
	return o.Payload
}

func (o *GetSearchSeriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchSeriesNotFound creates a GetSearchSeriesNotFound with default headers values
func NewGetSearchSeriesNotFound() *GetSearchSeriesNotFound {
	return &GetSearchSeriesNotFound{}
}

/*GetSearchSeriesNotFound handles this case with default header values.

Returned if no records are found that match your query.
*/
type GetSearchSeriesNotFound struct {
	Payload *models.NotFound
}

func (o *GetSearchSeriesNotFound) Error() string {
	return fmt.Sprintf("[GET /search/series][%d] getSearchSeriesNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchSeriesNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetSearchSeriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
