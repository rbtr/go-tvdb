// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/rbtr/go-tvdb/generated/models"
)

// PutUserFavoritesIDReader is a Reader for the PutUserFavoritesID structure.
type PutUserFavoritesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserFavoritesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserFavoritesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutUserFavoritesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserFavoritesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutUserFavoritesIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutUserFavoritesIDOK creates a PutUserFavoritesIDOK with default headers values
func NewPutUserFavoritesIDOK() *PutUserFavoritesIDOK {
	return &PutUserFavoritesIDOK{}
}

/*PutUserFavoritesIDOK handles this case with default header values.

List of user favorites.
*/
type PutUserFavoritesIDOK struct {
	Payload *models.UserFavoritesData
}

func (o *PutUserFavoritesIDOK) Error() string {
	return fmt.Sprintf("[PUT /user/favorites/{id}][%d] putUserFavoritesIdOK  %+v", 200, o.Payload)
}

func (o *PutUserFavoritesIDOK) GetPayload() *models.UserFavoritesData {
	return o.Payload
}

func (o *PutUserFavoritesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserFavoritesData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserFavoritesIDUnauthorized creates a PutUserFavoritesIDUnauthorized with default headers values
func NewPutUserFavoritesIDUnauthorized() *PutUserFavoritesIDUnauthorized {
	return &PutUserFavoritesIDUnauthorized{}
}

/*PutUserFavoritesIDUnauthorized handles this case with default header values.

Returned if your JWT token is missing or expired
*/
type PutUserFavoritesIDUnauthorized struct {
	Payload *models.NotAuthorized
}

func (o *PutUserFavoritesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user/favorites/{id}][%d] putUserFavoritesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserFavoritesIDUnauthorized) GetPayload() *models.NotAuthorized {
	return o.Payload
}

func (o *PutUserFavoritesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserFavoritesIDNotFound creates a PutUserFavoritesIDNotFound with default headers values
func NewPutUserFavoritesIDNotFound() *PutUserFavoritesIDNotFound {
	return &PutUserFavoritesIDNotFound{}
}

/*PutUserFavoritesIDNotFound handles this case with default header values.

Returned if no information exists for the current user
*/
type PutUserFavoritesIDNotFound struct {
	Payload *models.NotFound
}

func (o *PutUserFavoritesIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/favorites/{id}][%d] putUserFavoritesIdNotFound  %+v", 404, o.Payload)
}

func (o *PutUserFavoritesIDNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *PutUserFavoritesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserFavoritesIDConflict creates a PutUserFavoritesIDConflict with default headers values
func NewPutUserFavoritesIDConflict() *PutUserFavoritesIDConflict {
	return &PutUserFavoritesIDConflict{}
}

/*PutUserFavoritesIDConflict handles this case with default header values.

Returned if requested record could not be updated
*/
type PutUserFavoritesIDConflict struct {
	Payload *models.Conflict
}

func (o *PutUserFavoritesIDConflict) Error() string {
	return fmt.Sprintf("[PUT /user/favorites/{id}][%d] putUserFavoritesIdConflict  %+v", 409, o.Payload)
}

func (o *PutUserFavoritesIDConflict) GetPayload() *models.Conflict {
	return o.Payload
}

func (o *PutUserFavoritesIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conflict)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
