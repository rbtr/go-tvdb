// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUserFavoritesID Deletes the given series ID from the user’s favorite’s list and returns the updated list.
*/
func (a *Client) DeleteUserFavoritesID(params *DeleteUserFavoritesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserFavoritesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserFavoritesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUserFavoritesID",
		Method:             "DELETE",
		PathPattern:        "/user/favorites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserFavoritesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserFavoritesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserFavoritesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserRatingsItemTypeItemID This route deletes a given rating of a given type.
*/
func (a *Client) DeleteUserRatingsItemTypeItemID(params *DeleteUserRatingsItemTypeItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserRatingsItemTypeItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserRatingsItemTypeItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUserRatingsItemTypeItemID",
		Method:             "DELETE",
		PathPattern:        "/user/ratings/{itemType}/{itemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserRatingsItemTypeItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserRatingsItemTypeItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserRatingsItemTypeItemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUser Returns basic information about the currently authenticated user.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserFavorites Returns an array of favorite series for a given user, will be a blank array if no favorites exist.
*/
func (a *Client) GetUserFavorites(params *GetUserFavoritesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFavoritesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserFavoritesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserFavorites",
		Method:             "GET",
		PathPattern:        "/user/favorites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserFavoritesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserFavoritesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserFavorites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserRatings Returns an array of ratings for the given user.
*/
func (a *Client) GetUserRatings(params *GetUserRatingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRatingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRatingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserRatings",
		Method:             "GET",
		PathPattern:        "/user/ratings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserRatingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRatingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserRatings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserRatingsQuery Returns an array of ratings for a given user that match the query.
*/
func (a *Client) GetUserRatingsQuery(params *GetUserRatingsQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRatingsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRatingsQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserRatingsQuery",
		Method:             "GET",
		PathPattern:        "/user/ratings/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserRatingsQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRatingsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserRatingsQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserRatingsQueryParams Returns a list of query params for use in the `/user/ratings/query` route.
*/
func (a *Client) GetUserRatingsQueryParams(params *GetUserRatingsQueryParamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRatingsQueryParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRatingsQueryParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserRatingsQueryParams",
		Method:             "GET",
		PathPattern:        "/user/ratings/query/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserRatingsQueryParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRatingsQueryParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserRatingsQueryParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUserFavoritesID Adds the supplied series ID to the user’s favorite’s list and returns the updated list.
*/
func (a *Client) PutUserFavoritesID(params *PutUserFavoritesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUserFavoritesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserFavoritesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUserFavoritesID",
		Method:             "PUT",
		PathPattern:        "/user/favorites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUserFavoritesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserFavoritesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUserFavoritesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUserRatingsItemTypeItemIDItemRating This route updates a given rating of a given type.
*/
func (a *Client) PutUserRatingsItemTypeItemIDItemRating(params *PutUserRatingsItemTypeItemIDItemRatingParams, authInfo runtime.ClientAuthInfoWriter) (*PutUserRatingsItemTypeItemIDItemRatingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserRatingsItemTypeItemIDItemRatingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUserRatingsItemTypeItemIDItemRating",
		Method:             "PUT",
		PathPattern:        "/user/ratings/{itemType}/{itemId}/{itemRating}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUserRatingsItemTypeItemIDItemRatingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserRatingsItemTypeItemIDItemRatingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUserRatingsItemTypeItemIDItemRating: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
