// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/rbtr/go-tvdb/generated/models"
)

// GetUserFavoritesReader is a Reader for the GetUserFavorites structure.
type GetUserFavoritesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserFavoritesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserFavoritesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserFavoritesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserFavoritesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserFavoritesOK creates a GetUserFavoritesOK with default headers values
func NewGetUserFavoritesOK() *GetUserFavoritesOK {
	return &GetUserFavoritesOK{}
}

/*GetUserFavoritesOK handles this case with default header values.

User favorites.
*/
type GetUserFavoritesOK struct {
	Payload *models.UserFavoritesData
}

func (o *GetUserFavoritesOK) Error() string {
	return fmt.Sprintf("[GET /user/favorites][%d] getUserFavoritesOK  %+v", 200, o.Payload)
}

func (o *GetUserFavoritesOK) GetPayload() *models.UserFavoritesData {
	return o.Payload
}

func (o *GetUserFavoritesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserFavoritesData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserFavoritesUnauthorized creates a GetUserFavoritesUnauthorized with default headers values
func NewGetUserFavoritesUnauthorized() *GetUserFavoritesUnauthorized {
	return &GetUserFavoritesUnauthorized{}
}

/*GetUserFavoritesUnauthorized handles this case with default header values.

Returned if your JWT token is missing or expired
*/
type GetUserFavoritesUnauthorized struct {
	Payload *models.NotAuthorized
}

func (o *GetUserFavoritesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user/favorites][%d] getUserFavoritesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserFavoritesUnauthorized) GetPayload() *models.NotAuthorized {
	return o.Payload
}

func (o *GetUserFavoritesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserFavoritesNotFound creates a GetUserFavoritesNotFound with default headers values
func NewGetUserFavoritesNotFound() *GetUserFavoritesNotFound {
	return &GetUserFavoritesNotFound{}
}

/*GetUserFavoritesNotFound handles this case with default header values.

Returned if no information exists for the current user
*/
type GetUserFavoritesNotFound struct {
	Payload *models.NotFound
}

func (o *GetUserFavoritesNotFound) Error() string {
	return fmt.Sprintf("[GET /user/favorites][%d] getUserFavoritesNotFound  %+v", 404, o.Payload)
}

func (o *GetUserFavoritesNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetUserFavoritesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
