// Code generated by go-swagger; DO NOT EDIT.

package updates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUpdatedQueryParams creates a new GetUpdatedQueryParams object
// with the default values initialized.
func NewGetUpdatedQueryParams() *GetUpdatedQueryParams {
	var ()
	return &GetUpdatedQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUpdatedQueryParamsWithTimeout creates a new GetUpdatedQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUpdatedQueryParamsWithTimeout(timeout time.Duration) *GetUpdatedQueryParams {
	var ()
	return &GetUpdatedQueryParams{

		timeout: timeout,
	}
}

// NewGetUpdatedQueryParamsWithContext creates a new GetUpdatedQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUpdatedQueryParamsWithContext(ctx context.Context) *GetUpdatedQueryParams {
	var ()
	return &GetUpdatedQueryParams{

		Context: ctx,
	}
}

// NewGetUpdatedQueryParamsWithHTTPClient creates a new GetUpdatedQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUpdatedQueryParamsWithHTTPClient(client *http.Client) *GetUpdatedQueryParams {
	var ()
	return &GetUpdatedQueryParams{
		HTTPClient: client,
	}
}

/*GetUpdatedQueryParams contains all the parameters to send to the API endpoint
for the get updated query operation typically these are written to a http.Request
*/
type GetUpdatedQueryParams struct {

	/*AcceptLanguage
	  Records are returned with the some fields in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.

	*/
	AcceptLanguage *string
	/*FromTime
	  Epoch time to start your date range.

	*/
	FromTime string
	/*ToTime
	  Epoch time to end your date range. Must be one week from `fromTime`.

	*/
	ToTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get updated query params
func (o *GetUpdatedQueryParams) WithTimeout(timeout time.Duration) *GetUpdatedQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get updated query params
func (o *GetUpdatedQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get updated query params
func (o *GetUpdatedQueryParams) WithContext(ctx context.Context) *GetUpdatedQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get updated query params
func (o *GetUpdatedQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get updated query params
func (o *GetUpdatedQueryParams) WithHTTPClient(client *http.Client) *GetUpdatedQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get updated query params
func (o *GetUpdatedQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get updated query params
func (o *GetUpdatedQueryParams) WithAcceptLanguage(acceptLanguage *string) *GetUpdatedQueryParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get updated query params
func (o *GetUpdatedQueryParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithFromTime adds the fromTime to the get updated query params
func (o *GetUpdatedQueryParams) WithFromTime(fromTime string) *GetUpdatedQueryParams {
	o.SetFromTime(fromTime)
	return o
}

// SetFromTime adds the fromTime to the get updated query params
func (o *GetUpdatedQueryParams) SetFromTime(fromTime string) {
	o.FromTime = fromTime
}

// WithToTime adds the toTime to the get updated query params
func (o *GetUpdatedQueryParams) WithToTime(toTime *string) *GetUpdatedQueryParams {
	o.SetToTime(toTime)
	return o
}

// SetToTime adds the toTime to the get updated query params
func (o *GetUpdatedQueryParams) SetToTime(toTime *string) {
	o.ToTime = toTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetUpdatedQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	// query param fromTime
	qrFromTime := o.FromTime
	qFromTime := qrFromTime
	if qFromTime != "" {
		if err := r.SetQueryParam("fromTime", qFromTime); err != nil {
			return err
		}
	}

	if o.ToTime != nil {

		// query param toTime
		var qrToTime string
		if o.ToTime != nil {
			qrToTime = *o.ToTime
		}
		qToTime := qrToTime
		if qToTime != "" {
			if err := r.SetQueryParam("toTime", qToTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
