// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/rbtr/go-tvdb/generated/models"
)

// GetSeriesIDActorsReader is a Reader for the GetSeriesIDActors structure.
type GetSeriesIDActorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSeriesIDActorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSeriesIDActorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSeriesIDActorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSeriesIDActorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSeriesIDActorsOK creates a GetSeriesIDActorsOK with default headers values
func NewGetSeriesIDActorsOK() *GetSeriesIDActorsOK {
	return &GetSeriesIDActorsOK{}
}

/*GetSeriesIDActorsOK handles this case with default header values.

An array of actor objects for the given series id.
*/
type GetSeriesIDActorsOK struct {
	Payload *models.SeriesActors
}

func (o *GetSeriesIDActorsOK) Error() string {
	return fmt.Sprintf("[GET /series/{id}/actors][%d] getSeriesIdActorsOK  %+v", 200, o.Payload)
}

func (o *GetSeriesIDActorsOK) GetPayload() *models.SeriesActors {
	return o.Payload
}

func (o *GetSeriesIDActorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SeriesActors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesIDActorsUnauthorized creates a GetSeriesIDActorsUnauthorized with default headers values
func NewGetSeriesIDActorsUnauthorized() *GetSeriesIDActorsUnauthorized {
	return &GetSeriesIDActorsUnauthorized{}
}

/*GetSeriesIDActorsUnauthorized handles this case with default header values.

Returned if your JWT token is missing or expired
*/
type GetSeriesIDActorsUnauthorized struct {
	Payload *models.NotAuthorized
}

func (o *GetSeriesIDActorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /series/{id}/actors][%d] getSeriesIdActorsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSeriesIDActorsUnauthorized) GetPayload() *models.NotAuthorized {
	return o.Payload
}

func (o *GetSeriesIDActorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesIDActorsNotFound creates a GetSeriesIDActorsNotFound with default headers values
func NewGetSeriesIDActorsNotFound() *GetSeriesIDActorsNotFound {
	return &GetSeriesIDActorsNotFound{}
}

/*GetSeriesIDActorsNotFound handles this case with default header values.

Returned if the given series ID does not exist
*/
type GetSeriesIDActorsNotFound struct {
	Payload *models.NotFound
}

func (o *GetSeriesIDActorsNotFound) Error() string {
	return fmt.Sprintf("[GET /series/{id}/actors][%d] getSeriesIdActorsNotFound  %+v", 404, o.Payload)
}

func (o *GetSeriesIDActorsNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetSeriesIDActorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
