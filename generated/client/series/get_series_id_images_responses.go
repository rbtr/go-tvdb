// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/rbtr/go-tvdb/generated/models"
)

// GetSeriesIDImagesReader is a Reader for the GetSeriesIDImages structure.
type GetSeriesIDImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSeriesIDImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSeriesIDImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSeriesIDImagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSeriesIDImagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSeriesIDImagesOK creates a GetSeriesIDImagesOK with default headers values
func NewGetSeriesIDImagesOK() *GetSeriesIDImagesOK {
	return &GetSeriesIDImagesOK{}
}

/*GetSeriesIDImagesOK handles this case with default header values.

A summary of the image types and counts available for the given series.
*/
type GetSeriesIDImagesOK struct {
	Payload *models.SeriesImagesCounts
}

func (o *GetSeriesIDImagesOK) Error() string {
	return fmt.Sprintf("[GET /series/{id}/images][%d] getSeriesIdImagesOK  %+v", 200, o.Payload)
}

func (o *GetSeriesIDImagesOK) GetPayload() *models.SeriesImagesCounts {
	return o.Payload
}

func (o *GetSeriesIDImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SeriesImagesCounts)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesIDImagesUnauthorized creates a GetSeriesIDImagesUnauthorized with default headers values
func NewGetSeriesIDImagesUnauthorized() *GetSeriesIDImagesUnauthorized {
	return &GetSeriesIDImagesUnauthorized{}
}

/*GetSeriesIDImagesUnauthorized handles this case with default header values.

Returned if your JWT token is missing or expired
*/
type GetSeriesIDImagesUnauthorized struct {
	Payload *models.NotAuthorized
}

func (o *GetSeriesIDImagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /series/{id}/images][%d] getSeriesIdImagesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSeriesIDImagesUnauthorized) GetPayload() *models.NotAuthorized {
	return o.Payload
}

func (o *GetSeriesIDImagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotAuthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesIDImagesNotFound creates a GetSeriesIDImagesNotFound with default headers values
func NewGetSeriesIDImagesNotFound() *GetSeriesIDImagesNotFound {
	return &GetSeriesIDImagesNotFound{}
}

/*GetSeriesIDImagesNotFound handles this case with default header values.

Returned if the given series ID does not exist
*/
type GetSeriesIDImagesNotFound struct {
	Payload *models.NotFound
}

func (o *GetSeriesIDImagesNotFound) Error() string {
	return fmt.Sprintf("[GET /series/{id}/images][%d] getSeriesIdImagesNotFound  %+v", 404, o.Payload)
}

func (o *GetSeriesIDImagesNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetSeriesIDImagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
