// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSeriesIDImagesQueryParams creates a new GetSeriesIDImagesQueryParams object
// with the default values initialized.
func NewGetSeriesIDImagesQueryParams() *GetSeriesIDImagesQueryParams {
	var ()
	return &GetSeriesIDImagesQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSeriesIDImagesQueryParamsWithTimeout creates a new GetSeriesIDImagesQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSeriesIDImagesQueryParamsWithTimeout(timeout time.Duration) *GetSeriesIDImagesQueryParams {
	var ()
	return &GetSeriesIDImagesQueryParams{

		timeout: timeout,
	}
}

// NewGetSeriesIDImagesQueryParamsWithContext creates a new GetSeriesIDImagesQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSeriesIDImagesQueryParamsWithContext(ctx context.Context) *GetSeriesIDImagesQueryParams {
	var ()
	return &GetSeriesIDImagesQueryParams{

		Context: ctx,
	}
}

// NewGetSeriesIDImagesQueryParamsWithHTTPClient creates a new GetSeriesIDImagesQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSeriesIDImagesQueryParamsWithHTTPClient(client *http.Client) *GetSeriesIDImagesQueryParams {
	var ()
	return &GetSeriesIDImagesQueryParams{
		HTTPClient: client,
	}
}

/*GetSeriesIDImagesQueryParams contains all the parameters to send to the API endpoint
for the get series ID images query operation typically these are written to a http.Request
*/
type GetSeriesIDImagesQueryParams struct {

	/*AcceptLanguage
	  Records are returned with the some fields in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.

	*/
	AcceptLanguage *string
	/*ID
	  ID of the series

	*/
	ID int64
	/*KeyType
	  Type of image you're querying for (fanart, poster, etc. See ../images/query/params for more details).

	*/
	KeyType *string
	/*Resolution
	  Resolution to filter by (1280x1024, for example)

	*/
	Resolution *string
	/*SubKey
	  Subkey for the above query keys. See /series/{id}/images/query/params for more information

	*/
	SubKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithTimeout(timeout time.Duration) *GetSeriesIDImagesQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithContext(ctx context.Context) *GetSeriesIDImagesQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithHTTPClient(client *http.Client) *GetSeriesIDImagesQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithAcceptLanguage(acceptLanguage *string) *GetSeriesIDImagesQueryParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithID adds the id to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithID(id int64) *GetSeriesIDImagesQueryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetID(id int64) {
	o.ID = id
}

// WithKeyType adds the keyType to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithKeyType(keyType *string) *GetSeriesIDImagesQueryParams {
	o.SetKeyType(keyType)
	return o
}

// SetKeyType adds the keyType to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetKeyType(keyType *string) {
	o.KeyType = keyType
}

// WithResolution adds the resolution to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithResolution(resolution *string) *GetSeriesIDImagesQueryParams {
	o.SetResolution(resolution)
	return o
}

// SetResolution adds the resolution to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetResolution(resolution *string) {
	o.Resolution = resolution
}

// WithSubKey adds the subKey to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) WithSubKey(subKey *string) *GetSeriesIDImagesQueryParams {
	o.SetSubKey(subKey)
	return o
}

// SetSubKey adds the subKey to the get series ID images query params
func (o *GetSeriesIDImagesQueryParams) SetSubKey(subKey *string) {
	o.SubKey = subKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetSeriesIDImagesQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.KeyType != nil {

		// query param keyType
		var qrKeyType string
		if o.KeyType != nil {
			qrKeyType = *o.KeyType
		}
		qKeyType := qrKeyType
		if qKeyType != "" {
			if err := r.SetQueryParam("keyType", qKeyType); err != nil {
				return err
			}
		}

	}

	if o.Resolution != nil {

		// query param resolution
		var qrResolution string
		if o.Resolution != nil {
			qrResolution = *o.Resolution
		}
		qResolution := qrResolution
		if qResolution != "" {
			if err := r.SetQueryParam("resolution", qResolution); err != nil {
				return err
			}
		}

	}

	if o.SubKey != nil {

		// query param subKey
		var qrSubKey string
		if o.SubKey != nil {
			qrSubKey = *o.SubKey
		}
		qSubKey := qrSubKey
		if qSubKey != "" {
			if err := r.SetQueryParam("subKey", qSubKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
