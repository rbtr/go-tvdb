// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Movie movie
// swagger:model Movie
type Movie struct {

	// artworks
	Artworks []*MovieArtwork `json:"artworks"`

	// genres
	Genres []*MovieGenre `json:"genres"`

	// id
	ID int64 `json:"id,omitempty"`

	// people
	People *MoviePeople `json:"people,omitempty"`

	// release dates
	ReleaseDates []*MovieReleaseDate `json:"release_dates"`

	// remoteids
	Remoteids []*MovieRemoteID `json:"remoteids"`

	// runtime
	Runtime int64 `json:"runtime,omitempty"`

	// trailers
	Trailers []*MovieTrailer `json:"trailers"`

	// translations
	Translations []*MovieTranslation `json:"translations"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this movie
func (m *Movie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenres(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeople(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrailers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranslations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Movie) validateArtworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Artworks) { // not required
		return nil
	}

	for i := 0; i < len(m.Artworks); i++ {
		if swag.IsZero(m.Artworks[i]) { // not required
			continue
		}

		if m.Artworks[i] != nil {
			if err := m.Artworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validateGenres(formats strfmt.Registry) error {

	if swag.IsZero(m.Genres) { // not required
		return nil
	}

	for i := 0; i < len(m.Genres); i++ {
		if swag.IsZero(m.Genres[i]) { // not required
			continue
		}

		if m.Genres[i] != nil {
			if err := m.Genres[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("genres" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validatePeople(formats strfmt.Registry) error {

	if swag.IsZero(m.People) { // not required
		return nil
	}

	if m.People != nil {
		if err := m.People.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("people")
			}
			return err
		}
	}

	return nil
}

func (m *Movie) validateReleaseDates(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDates) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseDates); i++ {
		if swag.IsZero(m.ReleaseDates[i]) { // not required
			continue
		}

		if m.ReleaseDates[i] != nil {
			if err := m.ReleaseDates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("release_dates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validateRemoteids(formats strfmt.Registry) error {

	if swag.IsZero(m.Remoteids) { // not required
		return nil
	}

	for i := 0; i < len(m.Remoteids); i++ {
		if swag.IsZero(m.Remoteids[i]) { // not required
			continue
		}

		if m.Remoteids[i] != nil {
			if err := m.Remoteids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validateTrailers(formats strfmt.Registry) error {

	if swag.IsZero(m.Trailers) { // not required
		return nil
	}

	for i := 0; i < len(m.Trailers); i++ {
		if swag.IsZero(m.Trailers[i]) { // not required
			continue
		}

		if m.Trailers[i] != nil {
			if err := m.Trailers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trailers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validateTranslations(formats strfmt.Registry) error {

	if swag.IsZero(m.Translations) { // not required
		return nil
	}

	for i := 0; i < len(m.Translations); i++ {
		if swag.IsZero(m.Translations[i]) { // not required
			continue
		}

		if m.Translations[i] != nil {
			if err := m.Translations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("translations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Movie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Movie) UnmarshalBinary(b []byte) error {
	var res Movie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// People movie people
// swagger:model MoviePeople
type People struct {

	// actors
	Actors []*People `json:"actors"`

	// directors
	Directors []*People `json:"directors"`

	// producers
	Producers []*People `json:"producers"`

	// writers
	Writers []*People `json:"writers"`
}

// Validate validates this movie people
func (m *People) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *People) validateActors(formats strfmt.Registry) error {

	if swag.IsZero(m.Actors) { // not required
		return nil
	}

	for i := 0; i < len(m.Actors); i++ {
		if swag.IsZero(m.Actors[i]) { // not required
			continue
		}

		if m.Actors[i] != nil {
			if err := m.Actors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("people" + "." + "actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *People) validateDirectors(formats strfmt.Registry) error {

	if swag.IsZero(m.Directors) { // not required
		return nil
	}

	for i := 0; i < len(m.Directors); i++ {
		if swag.IsZero(m.Directors[i]) { // not required
			continue
		}

		if m.Directors[i] != nil {
			if err := m.Directors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("people" + "." + "directors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *People) validateProducers(formats strfmt.Registry) error {

	if swag.IsZero(m.Producers) { // not required
		return nil
	}

	for i := 0; i < len(m.Producers); i++ {
		if swag.IsZero(m.Producers[i]) { // not required
			continue
		}

		if m.Producers[i] != nil {
			if err := m.Producers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("people" + "." + "producers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *People) validateWriters(formats strfmt.Registry) error {

	if swag.IsZero(m.Writers) { // not required
		return nil
	}

	for i := 0; i < len(m.Writers); i++ {
		if swag.IsZero(m.Writers[i]) { // not required
			continue
		}

		if m.Writers[i] != nil {
			if err := m.Writers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("people" + "." + "writers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *People) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *People) UnmarshalBinary(b []byte) error {
	var res People
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
